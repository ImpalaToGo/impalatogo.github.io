{"name":"Impala2go","tagline":"A standalone distribution of Impala, optimized to work with cloud storage, bypassing HDFS completely.","body":"ImpalaToGo\r\n==========\r\n\r\nA standalone distribution of Impala, optimized to work with cloud storage, bypassing HDFS completely.\r\n\r\n### Why ImpalaToGo\r\n----\r\n>1. Remove the hard dependency to hdfs for those who want impala running for other distributed filesystems.\r\n2. Run fast queries on your machine without any extra setup. Hive metastore service is enough prerequisite to start work with impala, no extra installations/configurations required.\r\n3. No dependency on hdfs, thus, data locality is emulated via new layer, the cache, and is achieved via adaptive algorithms to map remote dfs data to impala cluster nodes cache.\r\n4. Transparent interaction with user via new set of commands. All operations are user-driven and user-friendly. \r\n5. All shell commands along with impala cluster statistics are available via web interface.\r\n6. Potential integration with any distributed file system via the compatible plugin.\r\n7. ImpalaToGo has a lot of ideas so far to make impala usage simple!\r\n \r\n\r\n\r\nDevelopment environment prerequisites (Ubuntu)\r\n----\r\n\r\n  - Install Java\r\n    ```sh\r\n    sudo apt-get install python-software-properties\r\n    sudo add-apt-repository ppa:webupd8team/java -y\r\n    sudo apt-get update -y\r\n    sudo apt-get install oracle-jdk7-installer -y\r\n    ```\r\n    \r\n  - install other prerequsites\r\n      ```sh\r\n    sudo apt-get install git build-essential cmake bison flex pkg-config libsasl2-dev autoconf automake libtool maven subversion doxygen libbz2-dev zlib1g-dev  python-setuptools python-dev libssl-dev -y\r\n    ```\r\n  - install recent gcc and g++ (4.9 for now)\r\n   ```sh\r\n    sudo apt-get update\r\n    sudo apt-get install gcc-4.9\r\n    sudo apt-get install g++-4.9\r\n    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 20\r\n    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 20\r\n    sudo update-alternatives --config gcc\r\n    sudo update-alternatives --config g++\r\n    ```\r\n    \r\n  - **configure boost in 1 click.** Now, default boost package is compatible with Impala, thus in order to configure boost, regular dev package is enough ( note that boost version should be >= 1.46.1 )\r\n```sh\r\nsudo apt-get install libboost-all-dev\r\n```\r\nJust be careful to have environment clear from boost artifacts before deploying new boost package (especially using apt-get).\r\nTo get rid of old possible boost artifacts:\r\n```sh\r\nsudo apt-get --purge remove libboost-dev\r\nsudo apt-get --purge remove libboost-all-dev\r\n\r\n# check installed boost version\r\ncat /usr/include/boost/version.hpp | grep \"BOOST_LIB_VERSION\"\r\n\r\n# check Boost package name:\r\ndpkg -S /usr/include/boost/version.hpp\r\n\r\n# Then having package name:\r\nsudo apt-get autoremove package\r\n\r\nsudo apt-get remove libboost*\r\nsudo apt-get autoclean\r\n```\r\n\r\n  - **Fast reference to build the boost manually.**\r\n    Newest boost builds do not contain packages with -mt prefixes as stated by boost.\r\n    \r\n    > To build libraries with -mt sufix:\r\n     \r\n    ```sh\r\n    ./bootstrap.sh --with-libraries=filesystem, regex, system\r\n    sudo ./bjam --layout=tagged --libdir=/usr/lib64 cxxflags=-fPIC threading=multi install\r\n    ```\r\n     > To build libraries without a suffix:  \r\n\r\n    ```sh\r\n    ./bootstrap.sh --with-libraries=thread, date_time, system\r\n    sudo ./bjam --libdir=/usr/lib64 cxxflags=-fPIC link=static threading=single runtime-link=static install\r\n    ```\r\n   \r\n   \r\n- install hive metastore database, for example, postgres, if going to run it locally\r\n\r\n```sh\r\nsudo apt-get install postgresql -y\r\n```\r\n\r\n- compile LLVM from source\r\n```sh\r\nwget http://llvm.org/releases/3.3/llvm-3.3.src.tar.gz\r\ntar xvf llvm-3.3.src.tar.gz\r\ncd llvm-3.3.src/tools/\r\nsvn co http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_33/final/ clang\r\ncd ../projects/\r\nsvn co http://llvm.org/svn/llvm-project/compiler-rt/tags/RELEASE_33/final\r\ncd ..\r\n./configure --with-pic\r\nmake -j4 REQUIRES_RTTI=1\r\nsudo make install\r\n```\r\n\r\n- configure JAVA HOME\r\n```sh\r\nexport JAVA_HOME=/usr/lib/jvm/java-7-oracle\r\n```\r\n\r\n- install Maven\r\n```sh\r\nwget http://www.interior-dsgn.com/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz\r\ntar xvf apache-maven-3.0.5-bin.tar.gz && sudo mv apache-maven-3.0.5 /usr/local\r\n```\r\n\r\n- Add the following three lines to your .bashrc:\r\n```sh\r\nexport M2_HOME=/usr/local/apache-maven-3.0.5\r\nexport M2=$M2_HOME/bin  \r\nexport PATH=$M2:$PATH\r\n```\r\nConfirm by running\r\n```sh\r\nsource ~/.bashrc\r\nmvn -version\r\n```\r\n\r\nImpala build\r\n----\r\nput the following lines in Your .bashrc (replace YOUR_PATH with path where you cloned ImpalaToGo sources.  BOOST_LIBRARY_DIR and LD_LIBRARY_DIR should point to boost libraries location\r\n```sh\r\nexport JAVA_HOME=/usr/lib/jvm/java-7-oracle\r\nexport IMPALA_HOME=YOUR_PATH/ImpalaToGo\r\nexport BOOST_LIBRARYDIR=/usr/lib/x86_64-linux-gnu\r\nexport LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu\r\n```\r\nand then run\r\n```sh\r\nsource ~/.bashrc\r\n```\r\n\r\n- cd to Impala source cloned dir, run \r\n```sh\r\nbin/impala-config.sh\r\n```\r\n\r\n- build thirdparty :\r\n```sh\r\n./bin/build_thirdparty.sh\r\n```\r\n\r\n- run impala build:\r\n```sh\r\n./buildall.sh\r\n```\r\n\r\nTo run unit testing on backend , do the following in the ImpalaToGo bin directory\r\n```sh\r\nexport IMPALA_BE_DIR=/root/ImpalaToGo/be/\r\n./run-backend-tests.sh\r\n\r\n```\r\n\r\nStart work with impala\r\n----\r\n\r\nTo run Impala locally, edit Impala configuration files.\r\nImpala will read configuration files that it founds on CLASSPATH. By defaut, fe test resources are added on CLASSPATH already ($IMPALA_HOME/fe/src/test/resources), so core-site.xml, hive-site.xml and hdfs-site.xml can be placed and edited there.\r\nNote that they will be rewritten with default values after frontend build.\r\n\r\n1. ####Make changes in configuration files to run impala locally.\r\n    > In core-site.xml, following properties should be set to file:///\r\n    ```xml\r\n  <property>\r\n    <name>fs.defaultFS</name>\r\n    <value>file:///</value>\r\n  </property>\r\n  <property>\r\n    <name>fs.default.name</name>\r\n    <value>file:///</value>\r\n    <description>The name of the default file system.  A URI whose scheme and authority determine the FileSystem implementation.</description>\r\n  </property>\r\n```\r\n  \r\n > In hive-site.xml, specify connection string, hive user and a password for one (for metastore usage). \r\n    \r\n2. ####Start all services.\r\nBefore to start any impala service(impalad, catalogd, statestored) run prerequisites in shell (for environment variables setup on the shell). Here /usr/lib/x86_64-linux-gnu is the boost libraries location, check and specify yours:\r\n\r\n```sh\r\nexport JAVA_HOME=/usr/lib/jvm/java-7-oracle\r\nexport IMPALA_HOME=/home/elenav/src/ImpalaToGo\r\nexport BOOST_LIBRARYDIR=/usr/lib/x86_64-linux-gnu\r\n . bin/impala-config.sh\r\nexport LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu\r\n```\r\n- **start metastore:**\r\nFor the first time, run the script:\r\n\r\n```sh\r\n${IMPALA_HOME}/bin/create-test-configuration.sh\r\n```\r\nthis will create the hive_impalatogo database and the hiveuser user in postgresql along with all required \t\tpermissions.\r\nNote this is needed only for the first time and is usually done by buildall script.\r\n\r\nstart metastore:\r\n\r\n```sh\r\ncd thirdparty/hive-0.10.0-cdh4.5.0/\r\nbin/hive --service metastore\r\n```\r\n- **start statestored:**\r\n```sh\r\n${IMPALA_HOME}/bin/start-statestore.sh\r\n```\r\n- **start catalogd:**\r\n```sh\r\n${IMPALA_HOME}/bin/start-catalogd.sh\r\n```\r\n- **start impalad:**\r\n```sh\r\n${IMPALA_HOME}/bin/start-impalad.sh\r\n```\r\n####Test impala with the local file via impala shell:\r\n\r\n- **start impala shell:**\r\n\r\n```sh\r\n  . bin/impala-shell.sh\r\n```\r\n\r\nWhen running on the same data node as Impalad, no need to connect explcitly. The prompt is automatically shows the conection to Impalad:\r\n\r\n[impalad_hostname:21000] >\r\n\r\nPlace a csv file to some local directory and run some statements on this location to be sure impala works for you:\r\n\r\n```sql\r\ncreate external table test_table (name string, category string, score double) ROW FORMAT DELIMITED fields terminated BY '\\t' lines terminated BY '\\n' location '/home/username/src/ImpalaToGo/datastorage/';\r\n```\r\n\r\n```sql\r\nselect * from test_table where category=\"xyz\";\r\n```\r\n\r\nLicense\r\n----\r\n\r\n[Apache License](http://www.apache.org/licenses/LICENSE-2.0.htm)\r\n\r\n\r\n\r\n####2014\r\n\r\n","google":"UA-57890489-1","note":"Don't delete this file! It's used internally to help with page regeneration."}